{"version":3,"sources":["App.module.scss","components/Filter/style.module.scss","components/Catcher/style.module.scss","components/Spiner/styles.module.scss","serviceWorker.ts","bus/ui/types.ts","bus/ui/reducer.ts","bus/users/types.ts","bus/users/reducer.ts","init/rootReducer.ts","REST/index.ts","bus/ui/actions.ts","bus/users/actions.ts","bus/users/saga/workers/fetchUsers.ts","bus/users/saga/watchers.ts","init/rootSage.ts","init/middleware/core.ts","init/store.ts","components/Filter/types.ts","components/Filter/index.tsx","components/Catcher/index.tsx","components/Spiner/index.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","types","initialState","Map","isFetching","List","rootReducer","combineReducers","ui","state","action","type","set","users","Seq","payload","groupBy","user","parseInt","moment","dob","format","clear","api","fetch","method","uiActions","error","meta","usersActions","fillUsers","clearUsers","fetchUsersAsync","fetchUsers","put","apply","response","json","status","Error","watchFetchUsers","watchUsers","takeEvery","all","call","rootSage","sagaMiddleware","createLogger","duration","collapsed","colors","title","prevState","nextState","createSagaMiddleware","middleware","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","enhancedStore","composeEnhancers","compose","applyMiddleware","store","createStore","run","Colors","Filter","didThrow","__didCatch","setState","count","isInRange","from","to","gray","blue","green","red","white","this","props","selectMonth","monthsJSX","months","map","month","id","usersGroup","get","size","color","__genColor","className","Styles","onMouseOut","onMouseOver","key","style","background","list","onClick","aria-labelledby","role","Component","Catcher","stack","console","log","message","componentStack","children","catcher","Spinner","spinner","connect","App","currentMonth","__selectMonth","__clearUsers","actions","__fetchUsers","usersJSX","firstName","lastName","app","navigation","Spiner","dispatch","bindActionCreators","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b678695b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2ziFi\",\"navigation\":\"App_navigation__dUcBC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"style_list__l1rXo\",\"-disabled\":\"style_-disabled__30jHs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"catcher\":\"style_catcher__31hN_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"styles_spinner__Rvp22\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const types = {\n    START_FETCHING: 'START_FETCHING',\n    STOP_FETCHING: 'STOP_FETCHING',\n    EMIT_ERROR: 'EMIT_ERROR',\n};","import { Map } from 'immutable';\n\n//Types\nimport { types } from './types';\n\nconst initialState = Map({\n    isFetching: false,\n});\n\nexport const uiReducer = (state = initialState, action: any) => {\n    switch (action.type) {\n        case types.START_FETCHING:\n            return state.set('isFetching', true);\n\n        case types.STOP_FETCHING:\n            return state.set('isFetching', false);\n\n        default:\n            return state;\n    }\n}","export const types = {\n    FILL_USERS: 'FILL_USERS',\n    CLEAR_USERS: 'CLEAR_USERS',\n\n    FETCH_USERS_ASYNC: 'FETCH_USERS_ASYNC',\n};\n\nexport interface User {\n    id: string;\n    firstName: string;\n    lastName: string;\n    dob: string;\n}","//Core\nimport { List, Seq } from 'immutable';\nimport moment from 'moment';\n\n//Types\nimport { types, User } from './types';\n\nconst initialState = List();\n\nexport const usersReducer = (state = initialState, action: any) => {\n    switch (action.type) {\n        case types.FILL_USERS:\n            return Seq(action.payload).groupBy( (user: User) => parseInt(moment(user.dob).format('M')) - 1 );\n\n        case types.CLEAR_USERS:\n            return state.clear();\n\n        default:\n            return state;\n    }\n}","import {combineReducers} from 'redux';\n\nimport {uiReducer as ui} from '~/bus/ui/reducer';\nimport {usersReducer as users} from '~/bus/users/reducer';\n\nexport const rootReducer = combineReducers({\n    ui,\n    users\n});","export const MAIN_API_URL = 'https://yalantis-react-school.herokuapp.com/api';\n\nexport const api = {\n  users: {\n      fetch(): Promise<any> {\n          return fetch(`${MAIN_API_URL}/task0/users`, {\n              method: 'GET',\n          });\n      }\n  }\n};","//Types\nimport { types } from './types';\n\nexport const uiActions= {\n    startFetching:()=>{\n        return {\n            type: types.START_FETCHING\n        };\n    },\n    stopFetching:()=>{\n        return {\n            type: types.STOP_FETCHING\n        };\n    },\n    emitError: (error: any, meta?: string ) => {\n        return {\n            type: types.EMIT_ERROR,\n            payload: error,\n            error: true,\n            meta,\n        }\n    }\n};","//Types\nimport { types } from './types';\n\nexport const usersActions= {\n    fillUsers:(users: any)=>{\n        return {\n            type: types.FILL_USERS,\n            payload: users,\n        };\n    },\n    clearUsers:()=>{\n        return {\n            type: types.CLEAR_USERS\n        };\n    },\n\n    fetchUsersAsync:()=>{\n        return {\n            type: types.FETCH_USERS_ASYNC\n        };\n    },\n};","//Core\nimport { put, apply } from 'redux-saga/effects';\n\nimport {api} from '~/REST';\nimport { uiActions } from '~/bus/ui/actions';\nimport { usersActions } from '~/bus/users/actions';\n\nexport function* fetchUsers (){\n    try {\n        yield put(uiActions.startFetching() );\n\n        const response = yield apply( api, api.users.fetch, [] );\n        const users = yield apply( response, response.json, [] );\n\n        if(response.status !== 200) {\n            throw new Error('🚨 shit happens');\n        }\n\n        yield put(usersActions.fillUsers(users) );\n    } catch (error) {\n        yield put(uiActions.emitError(error, 'fetchUsers worker'))\n    } finally {\n        yield put(uiActions.stopFetching() );\n    }\n\n}","//core\nimport {takeEvery, all, call} from 'redux-saga/effects';\n\n//Types\nimport {types} from '../types';\n\n//workers\nimport {fetchUsers} from './workers';\n\nfunction* watchFetchUsers() {\n    yield takeEvery(types.FETCH_USERS_ASYNC, fetchUsers)\n}\n\nexport function* watchUsers () {\n    yield all([call(watchFetchUsers)]);\n}","//Core\nimport { all, call } from 'redux-saga/effects';\n\n//Watcher\nimport { watchUsers } from '~/bus/users/saga/watchers';\n\nexport function* rootSage () {\n    yield all([call(watchUsers)]);\n}","import { applyMiddleware, compose } from 'redux';\n\n//middleware\nimport { createLogger } from 'redux-logger';\nimport createSagaMiddleware, { SagaMiddleware } from 'redux-saga';\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst __DEV__ = process.env.NODE_ENV === 'development';\n\nconst logger: any = createLogger({\n    duration: true,\n    collapsed: true,\n    colors: {\n        title: ()=> '#139BFE',\n        prevState: ()=> '#15C5FAF',\n        action: ()=> '#149945',\n        nextState: ()=> '#A47104',\n        error: ()=> '#ff0005'\n    }\n});\n\nconst sagaMiddleware = createSagaMiddleware();\nconst devtools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n\nconst composeEnhancers = __DEV__ && devtools ? devtools : compose;\n\nconst middleware: SagaMiddleware[] = [ sagaMiddleware ];\n\nif(__DEV__) {\n    middleware.push(logger);\n}\n\nconst enhancedStore = composeEnhancers( applyMiddleware(...middleware) );\n\nexport { enhancedStore, sagaMiddleware };","import { createStore } from 'redux';\n\n//Roots\nimport { rootReducer } from './rootReducer';\nimport { rootSage } from './rootSage';\n\n//middeleware\nimport {enhancedStore, sagaMiddleware} from './middleware/core'\n\nexport const store = createStore(rootReducer, enhancedStore );\n\nsagaMiddleware.run(rootSage );","import { Seq } from 'immutable';\n\nexport interface IListProps {\n    selectMonth: (id?: number) => void;\n    users: Seq<any, any>\n}\n\nexport enum Colors {\n    gray = 'gray',\n    blue = 'blue',\n    green = 'green',\n    red = 'red',\n    white = 'white',\n};","//core\nimport React, { Component } from \"react\";\nimport moment from \"moment\";\n\n// Types\nimport { IListProps, Colors } from \"./types\";\n\n// Instruments\nimport Styles from \"./style.module.scss\";\n\nexport default class Filter extends Component<IListProps> {\n  state = {\n    didThrow: false\n  };\n\n  __didCatch = () => {\n    this.setState({\n      didThrow: true\n    });\n  };\n\n  __genColor(count: number = 0): Colors {\n    const isInRange = (from: number, to?: number) =>\n      count >= from && (!to || count <= to);\n\n    switch (true) {\n      case isInRange(0, 2):\n        return Colors.gray;\n      case isInRange(3, 6):\n        return Colors.blue;\n      case isInRange(7, 10):\n        return Colors.green;\n      case isInRange(11):\n        return Colors.red;\n      default:\n        return Colors.white;\n    }\n  }\n\n  render() {\n    const { users, selectMonth } = this.props;\n    const { didThrow } = this.state;\n\n    if (didThrow) {\n      throw new Error(\"YOLO\");\n    }\n\n    const monthsJSX = moment.months().map((month: string, id: number) => {\n      const usersGroup = users.get(id);\n      const size = usersGroup ? usersGroup.size : 0;\n      const color = this.__genColor(size);\n      const onMouseOver = () => {\n        selectMonth(id);\n      };\n      const onMouseOut = () => {\n        selectMonth(void 0);\n      };\n      return (\n        <li\n          className={size === 0 ? Styles[\"-disabled\"] : \"\"}\n          onMouseOut={onMouseOut}\n          onMouseOver={onMouseOver}\n          key={`month${id}`}\n        >\n          <mark style={{ background: color }}></mark>\n          <span>\n            {month} ({size})\n          </span>\n        </li>\n      );\n    });\n\n    return (\n      <>\n        <ul className={Styles.list}>{monthsJSX}</ul>\n        <button onClick={this.__didCatch}>\n          Did Catch<span aria-labelledby=\"\" role=\"img\">🚨</span>\n        </button>\n      </>\n    );\n  }\n}\n","// Core\nimport React, { Component } from \"react\";\n\n// Instruments\nimport Styles from \"./style.module.scss\";\n\nexport default class Catcher extends Component {\n  state = {\n    error: false\n  };\n\n  componentDidCatch(error: any, stack: any) {\n    console.log(\"ERROR:\", error.message);\n    console.log(\"STACKTRACE:\", stack.componentStack);\n\n    this.setState({\n      error: true\n    });\n  }\n\n  render() {\n    const { error } = this.state;\n    const { children } = this.props;\n\n    if (error) {\n      return (\n        <section className={Styles.catcher}>\n          <span>A mysterious <span aria-labelledby=\"\" role=\"img\">👽</span> &nbsp;error <span aria-labelledby=\"\" role=\"img\">📛</span> &nbsp;occured.</span>\n          <p>\n            Our space <span aria-labelledby=\"\" role=\"img\">🛰</span> &nbsp;engineers strike team <span aria-labelledby=\"\" role=\"img\">👩🏼‍🚀 👨🏼‍🚀</span> &nbsp;is already\n            working <span aria-labelledby=\"\" role=\"img\">🚀</span> &nbsp;in order to fix that for you!\n          </p>\n        </section>\n      );\n    }\n\n    return children;\n  }\n}\n","// Core\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n// Instruments\nimport Styles from './styles.module.scss';\n\ninterface ISpinerState {\n    ui: any;\n}\n\ninterface ISpinerProps {\n    isFetching: boolean;\n}\n\nconst mapStateToProps = (state: ISpinerState): ISpinerProps => {\n    return {\n        isFetching: state.ui.get('isFetching')\n    }\n};\n\nclass Spinner extends Component<ISpinerProps> {\n    render () {\n        const { isFetching } = this.props;\n\n        if( isFetching ) {\n            return (\n                <div className = { Styles.spinner } />\n            );\n        }\n\n        return ('');\n    }\n}\n\nexport default connect(mapStateToProps)(Spinner)","// core\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\n\n// Action\nimport { usersActions } from \"~/bus/users/actions\";\n\n// Components\nimport Filter from \"~/components/Filter\";\nimport Catcher from \"~/components/Catcher\";\nimport Spiner from \"~/components/Spiner\";\n\n// Instruments\nimport Styles from \"./App.module.scss\";\nimport moment from \"moment\";\n\n// Types\nimport { User } from \"~/bus/users/types\";\nimport { IRootState, IRootProps, IRootActionProps } from \"~/App.types.ts\";\n\nconst mapStateToProps = (state: IRootState): IRootProps => {\n  return {\n    currentMonth: state.currentMonth,\n    users: state.users\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch): IRootActionProps => {\n  return {\n    actions: bindActionCreators({ ...usersActions }, dispatch)\n  };\n};\n\nclass App extends Component<IRootProps & IRootActionProps> {\n  state: Partial<IRootState> = {\n    currentMonth: void 0\n  };\n\n  componentDidMount() {\n    this.__fetchUsers();\n  }\n\n  __selectMonth = (id?: number) => {\n    this.setState({\n      currentMonth: id\n    });\n  };\n\n  __clearUsers = () => {\n    const { actions } = this.props;\n\n    actions.clearUsers();\n  };\n\n  __fetchUsers = () => {\n    const { actions } = this.props;\n\n    actions.fetchUsersAsync();\n  };\n\n  render() {\n    const { users } = this.props;\n    const { currentMonth } = this.state;\n\n    const usersGroup = users.get((currentMonth as unknown) as number);\n\n    const usersJSX = !usersGroup\n      ? \"\"\n      : usersGroup.map((user: User) => {\n          const dob = moment(user.dob).format(\"YYYY/MM/DD\");\n          return (\n            <li key={user.id}>\n              <span>\n                {user.firstName} {user.lastName} - {dob}\n              </span>\n            </li>\n          );\n        });\n\n    return (\n      <Catcher>\n        <section className={Styles.app}>\n          <div>\n            <Filter users={users} selectMonth={this.__selectMonth} />\n          </div>\n          <div>\n            <ol className={Styles.list}>{usersJSX}</ol>\n          </div>\n          <div className={Styles.navigation}>\n            <Spiner />\n            <button onClick={this.__fetchUsers}>\n              Fetch Users<span aria-labelledby=\"\" role=\"img\">🚀</span>\n            </button>\n            &nbsp;\n            <button onClick={this.__clearUsers}>\n              Clear Users<span aria-labelledby=\"\" role=\"img\">🗑</span>\n            </button>\n          </div>\n        </section>\n      </Catcher>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// Core\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\n\n// Instruments\nimport { store } from './init/store';\n\n// App\nimport App from './App';\n\nrender(<Provider store = {store} > <App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}